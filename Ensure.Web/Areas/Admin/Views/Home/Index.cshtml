@model AdminHomeModel
@using System.Text.Json
@{
    // list of all queried dates
    List<DateTime> daysList = new();
    for (DateTime i = Model.StartDayFor30; i <= DateTime.Today.Date; i += TimeSpan.FromDays(1))
    {
        daysList.Add(i);
    }
    var tasteArray = Enum.GetValues<EnsureTaste>().Select(t => t.ToString());
    string[] colorsForTastes = { "#f2f2d0", "#7b3f00", "#fc5a8d" };

    /// <summary>
    /// Serailizes & Returns the result as raw string.
    /// </summary>
    Microsoft.AspNetCore.Html.IHtmlContent GetRaw(object o)
    {
        return Html.Raw(JsonSerializer.Serialize(o));
    }

}
<h1>
    Admin
</h1>
<div class="row">
    <div class="col-12 col-md-6">
        <canvas id="last30dayslogs"></canvas>
    </div>

    <div class="col-12 col-md-6">
        <canvas id="last30daysusers"></canvas>
    </div>
</div>
<div class="row py-2">
    <div class="col-12 col-md-6">
        <canvas id="last30daystastes"></canvas>
    </div>
    <div class="col-12 col-md-6">
        <h6>Total users: @Model.TotalRegisteredUsers</h6>
        <h6>Total logs: @Model.TotalLoggedEnsures</h6>
    </div>
</div>

@section Scripts {
    <!-- Chart.JS for data visualisation + plugins -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2/dist/Chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0/dist/chartjs-plugin-datalabels.min.js"></script>
    <!-- Chart setup: last 30 days drinking stats -->
    <script type="text/javascript">
        const ensureElem = document.querySelector("#last30dayslogs");
        const userElem = document.querySelector("#last30daysusers");
        const tastesElem = document.querySelector("#last30daystastes");
        const labelsFor30 = @GetRaw(daysList.Select(d => d.ToString("d/M")));

        const piePrecentageOptions = {
            tooltips: {
                enabled: false
            },
            plugins: {
                datalabels: {
                    formatter: (value, ctx) => {

                        let datasets = ctx.chart.data.datasets;

                        if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                            let sum = datasets[0].data.reduce((a, b) => a + b, 0);
                            let percentage = Math.round((value / sum) * 100) + '%';
                            return percentage;
                        } else {
                            return percentage;
                        }
                    },
                    color: '#000',
                }
            }
        };

        if (ensureElem && ensureElem && tastesElem) {
            new Chart(
                ensureElem,
                {
                    type: 'line',
                    data: {
                        labels: labelsFor30,
                        datasets: [
                            {
                                label: 'Total Drinking in the past 30 days',
                                data: @GetRaw(Model.EnsuresData),
                                fill: false, borderColor: "rgb(75, 192, 192)", lineTension: 0.3
                            }
                        ]
                    }
                }
            );
            new Chart(
                userElem,
                {
                    type: 'line',
                    data: {
                        labels: labelsFor30,
                        datasets: [
                            {
                                label: 'Total Joines in the past 30 days',
                                data: @GetRaw(Model.UsersData),
                                fill: false, borderColor: "rgb(192, 75, 192)", lineTension: 0.3
                            }
                        ]
                    }
                }
            );

            new Chart(
                tastesElem,
                {
                    type: 'pie',
                    data: {
                        labels: @GetRaw(tasteArray),
                        datasets: [
                            {
                                label: 'Popular tastes in the past 30 days',
                                data: @(GetRaw(Model.TasteData)),
                                backgroundColor: @GetRaw(colorsForTastes)
                            }
                        ]
                    },
                    options: piePrecentageOptions
                }
            );
        }
        else {
            console.error("Element for chart could not be found.")
        }
    </script>
}